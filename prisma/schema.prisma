// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  company     String?
  phone       String?
  status      CustomerStatus @default(ONBOARDING)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  campaigns        Campaign[]
  appointments     Appointment[]
  onboarding_steps OnboardingStep[]

  @@map("customers")
}

model Campaign {
  id          String   @id @default(cuid())
  name        String
  platform    Platform
  customer_id String
  status      CampaignStatus @default(ACTIVE)
  budget      Float    @default(0)
  spent       Float    @default(0)
  impressions Int      @default(0)
  clicks      Int      @default(0)
  conversions Int      @default(0)
  cpc         Float    @default(0)
  cpm         Float    @default(0)
  roas        Float    @default(0)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  customer Customer @relation(fields: [customer_id], references: [id], onDelete: Cascade)

  @@map("campaigns")
}

model Appointment {
  id          String   @id @default(cuid())
  title       String
  description String?
  customer_id String
  date        String
  time        String
  status      AppointmentStatus @default(SCHEDULED)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  customer Customer @relation(fields: [customer_id], references: [id], onDelete: Cascade)

  @@map("appointments")
}

model OnboardingStep {
  id           String   @id @default(cuid())
  customer_id  String
  step_name    String
  step_order   Int
  status       OnboardingStatus @default(PENDING)
  completed_at DateTime?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relations
  customer Customer @relation(fields: [customer_id], references: [id], onDelete: Cascade)

  @@map("onboarding_steps")
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
  ONBOARDING
}

enum Platform {
  GOOGLE
  META
  TIKTOK
}

enum CampaignStatus {
  ACTIVE
  PAUSED
  ENDED
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum OnboardingStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}